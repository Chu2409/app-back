generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id          String                 @id @default(uuid())
  email       String                 @unique
  password    String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  submissions AssignmentSubmission[]
  enrollments Enrollment[]
}

model Semester {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subjects  Subject[]
}

model Subject {
  id          String       @id @default(uuid())
  name        String
  professor   String
  credits     Int
  status      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  semesterId  String
  assignments Assignment[]
  enrollments Enrollment[]
  schedules   Schedule[]
  semester    Semester     @relation(fields: [semesterId], references: [id])
}

model Schedule {
  id        String   @id @default(uuid())
  day       String
  time      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
}

model Enrollment {
  id         String   @id @default(uuid())
  finalGrade Float?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  studentId  String
  subjectId  String
  student    User     @relation(fields: [studentId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])
}

model Assignment {
  id          String                 @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  status      String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  subjectId   String
  subject     Subject                @relation(fields: [subjectId], references: [id])
  submissions AssignmentSubmission[]
  resources   Resource[]
}

model AssignmentSubmission {
  id           String     @id @default(uuid())
  isSubmitted  Boolean    @default(false)
  submittedAt  DateTime?
  grade        Float?
  feedback     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  studentId    String
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  student      User       @relation(fields: [studentId], references: [id])
  resources    Resource[]
}

model Resource {
  id           String                @id @default(uuid())
  name         String
  type         String
  url          String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  assignmentId String?
  submissionId String?
  assignment   Assignment?           @relation(fields: [assignmentId], references: [id])
  submission   AssignmentSubmission? @relation(fields: [submissionId], references: [id])
}
