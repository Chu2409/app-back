generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  semesters   Semester[]
  enrollments Enrollment[]
  submissions AssignmentSubmission[]
}

model Semester {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  userId   String
  subjects Subject[]
}

model Subject {
  id        String   @id @default(uuid())
  name      String
  professor String
  credits   Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  semester    Semester     @relation(fields: [semesterId], references: [id])
  semesterId  String
  schedules   Schedule[]
  assignments Assignment[]
  enrollments Enrollment[]
}

model Schedule {
  id        String   @id @default(uuid())
  day       String
  time      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String
}

model Enrollment {
  id         String   @id @default(uuid())
  finalGrade Float?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  student   User    @relation(fields: [studentId], references: [id])
  studentId String
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String
}

model Assignment {
  id          String   @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subject     Subject                @relation(fields: [subjectId], references: [id])
  subjectId   String
  resources   Resource[]
  submissions AssignmentSubmission[]
}

model AssignmentSubmission {
  id          String    @id @default(uuid())
  isSubmitted Boolean   @default(false)
  submittedAt DateTime?
  grade       Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  resources    Resource[]
}

model Resource {
  id        String   @id @default(uuid())
  name      String
  type      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignment   Assignment?           @relation(fields: [assignmentId], references: [id])
  assignmentId String?
  submission   AssignmentSubmission? @relation(fields: [submissionId], references: [id])
  submissionId String?
}
